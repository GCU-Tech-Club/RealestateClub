name: Deploy to Prod Environment on EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy to Prod Environment on EC2
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the 'main' branch from the repository
      - name: Checkout 'main' branch
        uses: actions/checkout@v3
        with:
          ref: 'main'  # Always use the 'main' branch

      # Step 2: Configure AWS credentials using GitHub Secrets
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY_PROD }}
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY_PROD }} || echo "Login failed"

      # Step 4: Build and tag the Docker image with the 'main' branch
      - name: Build and Tag Docker Image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY_PROD }}
          REPOSITORY_NAME: "gcurealestateprod"
        run: |
          IMAGE_TAG="$ECR_REGISTRY/$REPOSITORY_NAME:main"
          docker build -t $IMAGE_TAG -f ./backend/Dockerfile ./backend
          docker tag $IMAGE_TAG "$ECR_REGISTRY/$REPOSITORY_NAME:latest"  # Optional: Also tag as latest

      # Step 5: Push the Docker image to ECR
      - name: Push Docker Image to ECR
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY_PROD }}
          REPOSITORY_NAME: "gcurealestateprod"
        run: |
          IMAGE_TAG="$ECR_REGISTRY/$REPOSITORY_NAME:main"
          docker push $IMAGE_TAG
          docker push "$ECR_REGISTRY/$REPOSITORY_NAME:latest"  # Optional: Push the latest tag as well

      # Step 6: SSH into the EC2 instance and deploy the Docker container
      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          
          script: |
            REGION="${{ secrets.AWS_REGION }}"
            ECR_REGISTRY="${{ secrets.ECR_REGISTRY_PROD }}"
            REPOSITORY_NAME="gcurealestateprod"
            FIREBASE_SAK="${{ secrets.FIREBASE_SAK }}"

            # Authenticate Docker using the IAM role assigned to the EC2 instance
            aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

            # Pull the latest Docker image for the 'main' branch
            docker pull $ECR_REGISTRY/$REPOSITORY_NAME:main

            # Stop and remove any existing test container if it is running
            docker stop prod-container || true
            docker rm prod-container || true

            # Run the container on port 9091
            docker run -d --env PRODUCTION_MODE=true --env $FIREBASE_SAK --name prod-container -p 9091:5001 $ECR_REGISTRY/$REPOSITORY_NAME:main

            # restart nginx (probably would be fine without but for peace of mind)
            sudo systemctl restart nginx

            # Clean up unused Docker images to free up space
            docker image prune -f
